// Copyright 2022-2023 Tigris Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generate

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerate(t *testing.T) {
	flts := []FilterDef{
		{Name: "main.FilterOne", Body: `{"Field3":{"$lte":{{.}}}}`},
		{Name: "main.FilterTwo", Body: `{"Field2":{"$lt":10}}`},
		{Name: "main.FilterTwo", Body: `{"Field2":{"$lt":10}}`},
	}

	upds := []FilterDef{
		{Name: "main.UpdateOne", Body: `{"$decrement":{"field_float":12.5}}`},
		{Name: "main.UpdateTwo", Body: `{"$multiply":{"nested.field_arr.5.field_int":10, "nested.field_arr.7.field_int":{{.ArgInt}}}`},
		{Name: "main.UpdateOne", Body: `{"$decrement":{"field_float":12.5}}`},
	}

	var buf bytes.Buffer

	err := writeGenFileLow(&buf, "pkg_todo", flts, upds)
	require.NoError(t, err)

	exp := `// Code generated by tigrisgen; DO NOT EDIT.

package pkg_todo

import (
    "text/template"
	"encoding/json"

    "github.com/tigrisdata/tigris-client-go/tigris"
)

var tigrisFilters = map[string]tigris.NativeFilter{
    "main.FilterOne" : {Raw: ` + "`" + `{"Field3":{"$lte":{{.}}}}` + "`" + `},
    "main.FilterTwo" : {Raw: ` + "`" + `{"Field2":{"$lt":10}}` + "`" + `},
    "main.FilterTwo" : {Raw: ` + "`" + `{"Field2":{"$lt":10}}` + "`" + `},
}

var tigrisUpdates = map[string]tigris.NativeFilter{
    "main.UpdateOne" : {Raw: ` + "`" + `{"$decrement":{"field_float":12.5}}` + "`" + `},
    "main.UpdateTwo" : {Raw: ` + "`" + `{"$multiply":{"nested.field_arr.5.field_int":10, "nested.field_arr.7.field_int":{{.ArgInt}}}` + "`" + `},
    "main.UpdateOne" : {Raw: ` + "`" + `{"$decrement":{"field_float":12.5}}` + "`" + `},
}

func parseTemplate(k string, v tigris.NativeFilter) tigris.NativeFilter {
    c, err := template.New(k).Funcs(
        template.FuncMap{
            "toJSON": func(v any) (string, error) {
                b, err := json.Marshal(v)
                if err != nil {
                    return "", err
                }
                return string(b), nil
            },
        }).Parse(v.Raw)
    if err != nil {
        panic(err)
    }

    v.Compiled = c

	return v
}

func init() {
    if tigris.Filters == nil {
        tigris.Filters = make(map[string]tigris.NativeFilter)
    }

    if tigris.Updates == nil {
        tigris.Updates = make(map[string]tigris.NativeFilter)
    }

    for k, v := range tigrisFilters {
        tigris.Filters[k] = parseTemplate(k, v)
    }

    for k, v := range tigrisUpdates {
        tigris.Updates[k] = parseTemplate(k, v)
    }
}
`

	require.Equal(t, exp, buf.String())
}
