// Code generated by {{.Cmdline}}; DO NOT EDIT.

package {{.Package}}

import (
    "text/template"
	"encoding/json"

    "github.com/tigrisdata/tigris-client-go/tigris"
)

var tigrisFilters = map[string]tigris.NativeFilter{
{{- range $v := .Filters}}
    "{{$v.Name}}" : {Raw: `{{$v.Body}}`},
{{- end}}
}

var tigrisUpdates = map[string]tigris.NativeFilter{
{{- range $v := .Updates}}
    "{{$v.Name}}" : {Raw: `{{$v.Body}}`},
{{- end}}
}

func parseTemplate(k string, v tigris.NativeFilter) tigris.NativeFilter {
    c, err := template.New(k).Funcs(
        template.FuncMap{
            "toJSON": func(v any) (string, error) {
                b, err := json.Marshal(v)
                if err != nil {
                    return "", err
                }
                return string(b), nil
            },
        }).Parse(v.Raw)
    if err != nil {
        panic(err)
    }

    v.Compiled = c

	return v
}

func init() {
    if tigris.Filters == nil {
        tigris.Filters = make(map[string]tigris.NativeFilter)
    }

    if tigris.Updates == nil {
        tigris.Updates = make(map[string]tigris.NativeFilter)
    }

    for k, v := range tigrisFilters {
        tigris.Filters[k] = parseTemplate(k, v)
    }

    for k, v := range tigrisUpdates {
        tigris.Updates[k] = parseTemplate(k, v)
    }
}
